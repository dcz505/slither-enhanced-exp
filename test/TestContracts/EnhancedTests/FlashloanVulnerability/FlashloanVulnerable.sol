// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

interface IFlashloanCallback {
    function flashloanCallback(address token, uint256 amount) external;
}

contract FlashloanVulnerable {
    mapping(address => uint256) public deposits;
    
    function deposit(address token, uint256 amount) external {
        IERC20(token).transfer(address(this), amount);
        deposits[token] += amount;
    }
    
    function executeFlashloan(address token, uint256 amount, address callbackTarget) external {
        // 记录初始余额
        uint256 initialBalance = IERC20(token).balanceOf(address(this));
        
        // 发送闪电贷资金
        IERC20(token).transfer(callbackTarget, amount);
        
        // 调用回调函数
        IFlashloanCallback(callbackTarget).flashloanCallback(token, amount);
        
        // 验证资金已经返回
        uint256 finalBalance = IERC20(token).balanceOf(address(this));
        require(finalBalance >= initialBalance, "Flashloan not repaid");
    }
}