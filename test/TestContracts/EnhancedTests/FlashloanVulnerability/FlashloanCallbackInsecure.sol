// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/**
 * @title FlashloanCallbackInsecure
 * @dev A contract demonstrating various flashloan callback vulnerabilities
 *      that can be detected by the flashloan-callback-risks detector
 */
contract FlashloanCallbackInsecure {
    address public owner;
    mapping(address => uint256) public balances;
    mapping(address => bool) public whitelisted;
    bool private _locked;
    uint256 public totalBalance;
    
    // Events
    event Deposit(address user, uint256 amount);
    event Withdrawal(address user, uint256 amount);
    event FlashLoan(address borrower, uint256 amount);
    
    constructor() {
        owner = msg.sender;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Not the owner");
        _;
    }
    
    modifier nonReentrant() {
        require(!_locked, "ReentrancyGuard: reentrant call");
        _locked = true;
        _;
        _locked = false;
    }
    
    // Basic functionality
    function deposit() external payable {
        balances[msg.sender] += msg.value;
        totalBalance += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    
    function withdraw(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        totalBalance -= amount;
        
        // Vulnerable pattern: external call after state change
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
        
        emit Withdrawal(msg.sender, amount);
    }
    
    // Admin functions
    function addToWhitelist(address user) external onlyOwner {
        whitelisted[user] = true;
    }
    
    function removeFromWhitelist(address user) external onlyOwner {
        whitelisted[user] = false;
    }
    
    function setOwner(address newOwner) external onlyOwner {
        owner = newOwner;
    }
    
    // ======= FLASHLOAN CALLBACK FUNCTIONS WITH VULNERABILITIES =======
    
    /**
     * @dev Uniswap V2 style flashloan callback - vulnerable to state manipulation
     */
    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {
        // Missing sender validation - anyone can call this
        // Missing adequate access control
        
        // Unsafe state variable manipulation in callback
        totalBalance += amount0;
        
        // Process the callback data
        (address target, bytes memory callData) = abi.decode(data, (address, bytes));
        
        // Vulnerable pattern: dangerous external call from flashloan callback
        (bool success, ) = target.call(callData);
        require(success, "Callback execution failed");
        
        // Missing proper validation for return values
    }
    
    /**
     * @dev AAVE style flashloan callback - vulnerable to reentrancy
     */
    function executeOperation(
        address[] calldata assets,
        uint256[] calldata amounts,
        uint256[] calldata premiums,
        address initiator,
        bytes calldata params
    ) external returns (bool) {
        // Missing nonReentrant modifier
        // Missing proper access control check
        
        uint256 totalAmount = 0;
        for (uint256 i = 0; i < amounts.length; i++) {
            totalAmount += amounts[i];
        }
        
        // Decode callback parameters
        (address target, bytes memory callData) = abi.decode(params, (address, bytes));
        
        // Vulnerable pattern: external call before state update
        (bool success, ) = target.call(callData);
        require(success, "Callback execution failed");
        
        // State changes after external call
        for (uint256 i = 0; i < assets.length; i++) {
            // Vulnerable state manipulation
            balances[assets[i]] += amounts[i];
        }
        
        return true;
    }
    
    /**
     * @dev Compound style flashloan callback - vulnerable to context manipulation
     */
    function onFlashLoan(
        address initiator,
        address token,
        uint256 amount,
        uint256 fee,
        bytes calldata data
    ) external returns (bytes32) {
        // Missing sender validation
        // Missing nonReentrant protection
        
        // Vulnerable storage manipulation
        whitelisted[initiator] = true;
        
        // Process callback
        (address target, bytes memory callData) = abi.decode(data, (address, bytes));
        
        // Vulnerable pattern: external call with manipulated context
        (bool success, ) = target.call(callData);
        require(success, "Callback execution failed");
        
        // Insufficient cleanup of manipulated state
        
        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }
    
    /**
     * @dev Balancer style flashloan callback - vulnerable to balance manipulation
     */
    function receiveFlashLoan(
        address[] memory tokens,
        uint256[] memory amounts,
        uint256[] memory feeAmounts,
        bytes memory userData
    ) external {
        // Missing access control
        // Missing validation
        
        // Process callback and decode user data
        (address target, bytes memory callData) = abi.decode(userData, (address, bytes));
        
        // Vulnerable pattern: external call with state manipulation
        (bool success, ) = target.call(callData);
        require(success, "Callback execution failed");
        
        // Critical functions accessible during callback
        if (userData.length > 100) {
            // Potentially dangerous logic that should be protected
            owner = target; // Extreme example of vulnerable state change
        }
    }
    
    // Receive function to accept ETH
    receive() external payable {}
} 